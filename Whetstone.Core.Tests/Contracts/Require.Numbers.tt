<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

using NUnit.Framework;

// NOTE: ReSharper does not deal well with these generate files.
// ReSharper disable errors
// ReSharper disable All

namespace Whetstone.Core.Contracts
{
    public partial class RequireTests
    {
<#
		foreach (var type in _FSigned)
		{
			Emit_NotNegative(type);
			Emit_Positive(type);
		}
#>
    }
}
<#+
	static string[] _FSigned = new [] { "sbyte", "short", "int", "long" };
	static string[] _FUnsigned = new [] { "byte", "ushort", "uint", "ulong" };

	public void Emit_NotNegative(string AType)
	{
#>
		[TestCase(0)]
		[TestCase(1)]
		public void NotNegative_<#= AType #>_NotNegative_ReturnsValue(<#= AType #> AValue)
		{
			Assert.That(Require.NotNegative(AValue, nameof(AValue)), Is.EqualTo(AValue));
		}

		[Test]
		public void NotNegative_<#= AType #>_Negative_ThrowsArgumentOutOfRangeException()
		{
			var ex = Assert.Throws<ArgumentOutOfRangeException>(
                () => Require.NotNegative((<#= AType #>)-1, C_ParamName)
            );

            Assert.That(ex.ParamName, Is.EqualTo(C_ParamName));
		}
<#+
	}

	public void Emit_Positive(string AType)
	{
#>
		[Test]
		public void Positive_<#= AType #>_Positive_ReturnsValue()
		{
			const <#= AType #> value = 1;

			Assert.That(Require.Positive(value, nameof(value)), Is.EqualTo(value));
		}

		[TestCase(-1)]
		[TestCase(0)]
		public void Positive_<#= AType #>_NullOrLess_ThrowsArgumentOutOfRangeException(<#= AType #> AValue)
		{
			var ex = Assert.Throws<ArgumentOutOfRangeException>(
                () => Require.Positive(AValue, nameof(AValue))
            );

            Assert.That(ex.ParamName, Is.EqualTo(nameof(AValue)));
		}
<#+
	}
#>