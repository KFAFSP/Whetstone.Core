<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)T4\NumberType.tt" #>
using System;
using System.Diagnostics;

using JetBrains.Annotations;

namespace Whetstone.Core.Contracts
{
	public partial class Require
	{
<#
		foreach (var type in NumberType.All) Emit(type);
#>
	}
}
<#+
public void Emit(NumberType AType)
{
	if (!AType.IsSigned) return;
#>
		/// <summary>
        /// Require that a parameter is positive.
        /// </summary>
        /// <param name="AParam">The parameter value.</param>
        /// <param name="AParamName">The parameter name.</param>
        /// <returns><paramref name="AParam"/>.</returns>
        /// <exception cref="ArgumentOutOfRangeException">
        /// <paramref name="AParam"/> is not positive.
        /// </exception>
        /// <remarks>
        /// This method is annotated with the <see cref="DebuggerHiddenAttribute"/> and therefore
        /// not part of the stack-trace of the exception that it throws.
        /// </remarks>
        [DebuggerHidden]
        public static <#= AType.Keyword #> Positive(
            <#= AType.Keyword #> AParam,
            [NotNull] [InvokerParameterName] string AParamName
        )
        {
            if (AParam <= <#= AType.Literal(0) #>)
            {
                throw new ArgumentOutOfRangeException(
                    AParamName,
                    AParam,
                    @"Value must be positive."
                );
            }

            return AParam;
        }

<#+
}
#>